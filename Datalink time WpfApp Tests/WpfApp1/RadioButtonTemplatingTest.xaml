<Window x:Class="WpfApp1.RadioButtonTemplatingTest"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp1"
        mc:Ignorable="d"
        Title="RadioButtonTemplatingTest" Height="450" Width="800">
    <Window.Resources>        
        <Style x:Key="RadioButtonStyle1" TargetType="{x:Type RadioButton}">
            <Setter Property="FontFamily" Value="Calibri"/>
            <Setter Property="BorderBrush" Value="Blue"/>
            <Setter Property="Foreground" Value="Blue"/>
            <Setter Property="Background" Value="White"/>

            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontSize" Value="12"/>
            <Setter Property="FontWeight" Value="SemiBold"/>
            <Setter Property="Border.CornerRadius" Value="10"/>

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True" CornerRadius="{TemplateBinding Border.CornerRadius}" Margin="{TemplateBinding Margin}">
                            <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" TargetName="border" Value="Blue"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="False">
                                <Setter Property="Background" TargetName="border" Value="White"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Blue"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="Blue"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                            </Trigger>
                            <!--<Trigger Property="IsChecked" Value="True">
                                <Setter Property="Background" TargetName="border" Value="Blue"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="White"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter Property="Background" TargetName="border" Value="White"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Blue"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter Property="Background" TargetName="border" Value="White"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="Blue"/>
                            </Trigger>-->
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <!--we will make command binding to IsChecked there we will pass name of button as command param and will decide in event handler to use which one to work or not...-->
        <StackPanel >
            <RadioButton IsChecked="True" Style="{DynamicResource RadioButtonStyle1}" GroupName="ButtonGroup1" Content="Yes" Width="100px" Height="30px"/>
            <RadioButton Style="{DynamicResource RadioButtonStyle1}" GroupName="ButtonGroup1" Content="No" Width="100px" Height="30px"/>
        </StackPanel>
    </Grid>
</Window>
